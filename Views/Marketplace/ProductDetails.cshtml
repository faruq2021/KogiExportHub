@model KogiExportHub.Models.Product

@{
    ViewData["Title"] = Model.Name;
}

<div class="container mt-4">
    <div class="row">
        <div class="col-md-6 mb-3 mb-md-0">
            @if (!string.IsNullOrEmpty(Model.ImageUrl))
            {
                <img src="~/@Model.ImageUrl.Replace("\\", "/")" class="img-fluid rounded shadow-sm" alt="@Model.Name" style="max-height: 500px; width: 100%; object-fit: contain;">
            }
            else
            {
                <img src="~/images/placeholder.png" class="img-fluid rounded shadow-sm" alt="No Image Available" style="max-height: 500px; width: 100%; object-fit: contain;">
            }
        </div>
        <div class="col-md-6">
            <h2>@Model.Name</h2>
            <hr />
            <p class="lead">@Model.Description</p>
            <h3 class="text-success fw-bold my-3">â‚¦@Model.Price.ToString("N2") per @Model.Unit</h3>
            
            <dl class="row">
                <dt class="col-sm-4">Available Quantity:</dt>
                <dd class="col-sm-8">@Model.Quantity @Model.Unit@(Model.Quantity != 1 ? "s" : "")</dd>
                
                <dt class="col-sm-4">Category:</dt>
                <dd class="col-sm-8">@Model.Category?.Name</dd>

                @if (Model.Location != null)
                {
                    <dt class="col-sm-4">Location:</dt>
                    <dd class="col-sm-8">@Model.Location.Name</dd>
                }

                @if (Model.Seller != null)
                {
                    <dt class="col-sm-4">Seller:</dt>
                    <dd class="col-sm-8">
                        @if (!string.IsNullOrEmpty(Model.Seller.FirstName) || !string.IsNullOrEmpty(Model.Seller.LastName))
                        {
                            @(Model.Seller.FirstName + " " + Model.Seller.LastName)
                        }
                        else if (Model.Seller.User != null && !string.IsNullOrEmpty(Model.Seller.User.UserName))
                        {
                            @Model.Seller.User.UserName
                        }
                        else
                        {
                            <span>N/A</span>
                        }
                    </dd>
                }
                <dt class="col-sm-4">Listed On:</dt>
                <dd class="col-sm-8">@Model.CreatedAt.ToString("D")</dd>

                <dt class="col-sm-4">Last Updated:</dt>
                <dd class="col-sm-8">@Model.UpdatedAt.ToString("g")</dd>
            </dl>
            
            <!-- Enhanced Add to Cart Section -->
            <div class="mt-4">
                <div class="row g-3 align-items-end">
                    <div class="col-md-4">
                        <label for="quantity" class="form-label fw-bold">Quantity</label>
                        <div class="input-group">
                            <button class="btn btn-outline-secondary" type="button" onclick="decreaseQuantity()">-</button>
                            <input type="number" class="form-control text-center" id="quantity" value="1" min="1" max="@Model.Quantity" readonly>
                            <button class="btn btn-outline-secondary" type="button" onclick="increaseQuantity()">+</button>
                        </div>
                        <small class="text-muted">Max: @Model.Quantity @Model.Unit</small>
                    </div>
                    <div class="col-md-8">
                        <div class="d-grid gap-2 d-md-flex">
                            <button type="button" class="btn btn-primary btn-lg flex-md-fill" onclick="addToCart(@Model.Id)">
                                <i class="bi bi-cart-plus"></i> Add to Cart
                            </button>
                            <button type="button" class="btn btn-success btn-lg flex-md-fill" onclick="buyNow(@Model.Id)">
                                <i class="bi bi-lightning"></i> Buy Now
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="mt-3">
                <a asp-action="ProductList" class="btn btn-outline-secondary">
                    <i class="bi bi-arrow-left"></i> Back to Marketplace
                </a>
            </div>
        </div>
    </div>
</div>

<!-- Success/Error Messages -->
<div id="cartMessage" class="position-fixed top-0 end-0 p-3" style="z-index: 1050;"></div>

@section Scripts {
    <script>
        function increaseQuantity() {
            const input = document.getElementById('quantity');
            const max = parseInt(input.getAttribute('max'));
            if (parseInt(input.value) < max) {
                input.value = parseInt(input.value) + 1;
            }
        }

        function decreaseQuantity() {
            const input = document.getElementById('quantity');
            if (parseInt(input.value) > 1) {
                input.value = parseInt(input.value) - 1;
            }
        }

        function addToCart(productId) {
            const quantity = document.getElementById('quantity').value;
            
            fetch('/Cart/AddToCart', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                },
                body: `productId=${productId}&quantity=${quantity}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showMessage(data.message, 'success');
                    updateCartCount(data.cartCount);
                } else {
                    showMessage(data.message, 'error');
                }
            })
            .catch(error => {
                showMessage('An error occurred. Please try again.', 'error');
            });
        }

        function buyNow(productId) {
            const quantity = document.getElementById('quantity').value;
            
            fetch('/Cart/AddToCart', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                },
                body: `productId=${productId}&quantity=${quantity}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    window.location.href = '/Cart/Checkout';
                } else {
                    showMessage(data.message, 'error');
                }
            })
            .catch(error => {
                showMessage('An error occurred. Please try again.', 'error');
            });
        }

        function showMessage(message, type) {
            const alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
            const icon = type === 'success' ? 'bi-check-circle' : 'bi-exclamation-triangle';
            
            const messageHtml = `
                <div class="alert ${alertClass} alert-dismissible fade show" role="alert">
                    <i class="bi ${icon}"></i> ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `;
            
            document.getElementById('cartMessage').innerHTML = messageHtml;
            
            setTimeout(() => {
                const alert = document.querySelector('#cartMessage .alert');
                if (alert) {
                    alert.remove();
                }
            }, 5000);
        }

        function updateCartCount(count) {
            const cartBadge = document.querySelector('.cart-count');
            if (cartBadge) {
                cartBadge.textContent = count;
                cartBadge.style.display = count > 0 ? 'inline' : 'none';
            }
        }
    </script>
}